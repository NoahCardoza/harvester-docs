'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/1-getting-started/','title':"1 Getting Started",'section':"Docs",'content':"Getting Started #  Where to get a copy #  Right now the harvester is in active beta. To git a copy, you must fill out this\nGoogle Form.\nIt\u0026rsquo;s also a good idea to send me a message on Discord (@MacHacker#7322) just in\ncase I forgoet to check over the form responses.\nWhile you wait, if you plan to purchase a copy, you can fill out this\nGoogle Form\nto help me estimate how many users I\u0026rsquo;ll have to suppoort. You can find pricing\ndetails here.\nLicensing #  Apon reciving a copy, you\u0026rsquo;ll be provided with a zipfile (\u0026lt;your-discord-handle\u0026gt;-Beta.zip) which will differ based\non how you filled out the registration form. It\u0026rsquo;ll structured something like this:\n/package/\u0026lt;py-version\u0026gt;/\u0026lt;platform\u0026gt;/ harvester/ example.py hconfig.py secret.py Besides the actual harvester code within harvester/ the next most important file is\nhconfig.py. Your example hconfig.py will look something like this:\nfrom hashlib import md5 from secrets import key session = md5(key).hexdigest() The idea behind it, is that every\nWhen you recive the harvester zipfile, within in the file you\u0026rsquo;ll find a licence.key file.\nThis will be a string that should look something like this f4b038a5-110d-4f34-8e9b-afdb2090ba82.\nTo access the full power of the harvester you\u0026rsquo;ll have to first import the unlock function and\nproceed as so:\nimport harvester err = harvester.unlock(\u0026#39;f4b038a5-110d-4f34-8e9b-afdb2090ba82\u0026#39;) if err: raise RuntimeError(err) from harvester import Harvester, ReCaptchaV2 In addition to validating the licence key, calling unlock will also\nmake sure you have the most recent version of the harvester avaliable.\nYou should call this everytime before you start using the harvester.\nHowever, it will work without it for a couple of days until the copy\nit downloads and expires.\n"});index.add({'id':1,'href':'/docs/2-supported-captchas/1-recaptcha-v2-example/','title':"1 ReCaptcha v2 Example",'section':"2 Supported Captchas",'content':"ReCaptcha v2 Example #  This guide shows how to setup the harvester to collect tokens for Google\u0026rsquo;s ReCaptcha v2.\nNOTE: This example assumes you have already unlocked the harvester. For more information\non that see here\nfrom harvester import Harvester, ReCaptchaV2 captcha = ReCaptchaV2( url=\u0026#39;www.supremenewyork.com\u0026#39;, sitekey=\u0026#39;6LeWwRkUAAAAAOBsau7KpuC9AV-6J8mhw4AjC3Xz\u0026#39; ) harvester = Harvester().serveforever() intercepter = harvester.capture(captcha) Next, take a look at configuring the browser and getting to the actual harvesting of the captcha tokens here\n"});index.add({'id':2,'href':'/docs/2-supported-captchas/2-recaptcha-v3-example/','title':"2 ReCaptcha v3 Example",'section':"2 Supported Captchas",'content':"ReCaptcha v3 Example #  This guide shows how to setup the harvester to collect tokens for Google\u0026rsquo;s ReCaptcha v3.\nNOTE: This example assumes you have already unlocked the harvester. For more information\non that see here\nfrom harvester import Harvester, ReCaptchaV3 captcha = ReCaptchaV3( url=\u0026#39;https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php\u0026#39;, sitekey=\u0026#39;6LdyC2cUAAAAACGuDKpXeDorzUDWXmdqeg-xy696\u0026#39;, action=\u0026#39;examples/v3scores\u0026#39; ) harvester = Harvester().serveforever() intercepter = harvester.capture(captcha) Next, take a look at configuring the browser and getting to the actual harvesting of the captcha tokens here\n"});index.add({'id':3,'href':'/docs/2-supported-captchas/3-hcaptcha-example/','title':"3 hCaptcha Example",'section':"2 Supported Captchas",'content':"hCaptchas Example #  This guide shows how to setup the harvester to collect tokens for hCaptchas.\nNOTE: This example assumes you have already unlocked the harvester. For more information\non that see here\nfrom harvester import Harvester, hCaptcha captcha = hCaptcha( url=\u0026#39;www.sotostore.com\u0026#39;, sitekey=\u0026#39;33f96e6a-38cd-421b-bb68-7806e1764460\u0026#39; ) harvester = Harvester().serveforever() intercepter = harvester.capture(captcha) Next, take a look at configuring the browser and getting to the actual harvesting of the captcha tokens here\n"});index.add({'id':4,'href':'/docs/3-opening-the-browser/','title':"3 Opening The Browser",'section':"Docs",'content':"Opening The Browser #  This guide shows you how to launch a browser instance after getting an intercepter\ninstance back from harvester.capture.\nQuick Recap #  We\u0026rsquo;ll be using a ReCaptchaV2 in this example, but you are able to pass any of the\ncaptcha configs and the browser API will work in the exact same way.\nfrom harvester import Harvester, ReCaptchaV2 captcha = ReCaptchaV2( url=\u0026#39;www.supremenewyork.com\u0026#39;, sitekey=\u0026#39;6LeWwRkUAAAAAOBsau7KpuC9AV-6J8mhw4AjC3Xz\u0026#39; ) harvester = Harvester().serveforever() intercepter = harvester.capture(captcha) You\u0026rsquo;ll probaby recognize the code above as being pulled straight from the ReCaptcha V2 Example!\nNow lets get to setting up the browser.\nbrowser = intercepter.setup_browser(user_data_dir=\u0026#39;ChromeData\u0026#39;) The code above will return a new Browser instance. Keep in mind that calling\nsetup_browser again will return the same instance it returned the first time.\nThis might change in the future.\nThe user_data_dir can be a path to an existing user-data-dir, or it can be to\na folder than doesn\u0026rsquo;t exist yet, in which case the folder will be created. Make\nsure any parent folders have already been created though.\nNow we\u0026rsquo;ll have to get access to a Profile object to actually lauch a window.\nA Simple Example #  # check to see if any profiles exist already if not browser.get_profiles(): # create a new profile profile = browser.new_profile(\u0026#39;Foo\u0026#39;) # this will open a window which allows the user to login to google # it will block until the user close the browser, browser, not the window profile.login_to_google() else: # load the profile that should exist after running the code a second time profile = browser.get_profile(\u0026#39;Foo\u0026#39;) # this will create a window which will connect to the server # and display captcha\u0026#39;s to the user when they are requested # later in in the code profile.harvest() Loops For The Win #  Using the power of the for loop, we\u0026rsquo;ll initiate a couple of profiles, log them\ninto Google, and then open them to start harvesting ReCaptcha v2 tokens.\n# check to see if any profiles exist already existing_profiles = len(browser.get_profiles()) if existing_profiles \u0026lt; 6: for i in range(existing_profiles - 6): profile = browser.new_profile(f\u0026#39;Foo-{i}\u0026#39;) profile.login_to_google() for profile in browser.get_profiles(): profile.harvest() The code above will open at least 6 windows unless more than 6 profiles\nalready existed before running the code.\nUsing Proxies #  To setup a proxy all you need to do is:\nfrom harvester import Proxy proxy = Proxy( host=\u0026#39;127.0.0.1, port=9487 ) Authenicated Proxies #  To use authenicated proxies, all you need to do is\npass a username and password like:\nproxy = Proxy( host=\u0026#39;127.0.0.1, port=9487, username=\u0026#39;foo\u0026#39;, password=\u0026#39;bar\u0026#39; ) Setting The Proxy #  To actually set a proxy in a profile, all you need to do is call\n.set_proxy.\nproxy = Proxy( host=\u0026#39;127.0.0.1, port=9487 ) if not browser.get_profiles(): profile = browser.new_profile(\u0026#39;Foo\u0026#39;) profile.set_proxy(proxy) # from now on all requests will be proxied profile.login_to_google() else: # set proxy is setup for chaining so you can use it like this too profile = browser.get_profile(\u0026#39;Foo\u0026#39;).set_proxy(proxy) profile.harvest() Finally, we are ready to access the tokens!\n"});index.add({'id':5,'href':'/docs/4-accessing-the-tokens/','title':"4 Accessing The Tokens",'section':"Docs",'content':"Accessing The Tokens #  This guide shows you how to request tokens after launching a browser window.\nWhile this can be done before launching a browser, it wouldn\u0026rsquo;t make much\nsense since there would be no way for the user to solve the captchas.\nHere is a simple example that will wait for the user to press enter before\nrequesting a token. After receiving it, the token it printed to the screen.\nintercepter = harvester.capture(captcha) while True: input(\u0026#39;\u0026gt; \u0026#39;) token = intercepter.tokens.get() print(token) "});index.add({'id':6,'href':'/docs/5-api-documentation/','title':"5 API Documentation",'section':"Docs",'content':"\nHarvester #  class Harvester() This is where all the magic happends. Genisis. Root. God.\nNormally, you\u0026rsquo;ll only need to instanciate this once within\nyour code.\nArguments:\n host str, optional - The address you want to bind to. Defaults to \u0026lsquo;127.0.0.1\u0026rsquo;. port int, optional - The port you want to listen on. Defaults to 5000. do_not_track bool, optional - Disables the analytics tracking. Not recomended. Defaults to False.  \nserveforever #  | serveforever() -\u0026gt; Thread Wraps the server\u0026rsquo;s serveforever method in a daemonized thread.\nIf you\u0026rsquo;d like do do this yourself you can call harvester._serveforever()\n\nshutdown #  | shutdown() Gracefully shutsdown the server and waits for all connections to close\n\ncapture #  | capture(captcha: Captcha) -\u0026gt; Intercepter This method will use the information passed to it to\nconfigure the server to harvest captchas on a certian\ndomain with the specified captcha type and sitekey.\nArguments:\n captcha Captcha - An object instanciated by ReCaptchaV2, ReCaptchaV3,\nor hCaptcha  Returns:\n Intercepter - [description]  Example:\ncaptcha = ReCaptchaV3( url=\u0026#39;https://recaptcha-demo.appspot.com/recaptcha-v3-request-scores.php\u0026#39;, sitekey=\u0026#39;6LdyC2cUAAAAACGuDKpXeDorzUDWXmdqeg-xy696\u0026#39;, action=\u0026#39;examples/v3scores\u0026#39; ) harvester = Harvester() intercepter = harvester.capture(captcha) \nIntercepter #  class Intercepter() An instance of Intercepter will be returned from Harvester.capture.\nFrom here you\u0026rsquo;ll be able to create a browser instance which will get\nyou one step closer to solving captchas.\nThis is where all the magic happends. Genisis. Root. God.\nNormally, you\u0026rsquo;ll only need to instanciate this once within\nyour code.\nAttributes:\n tokens TokenQueue - The queue like object that allows you\nto request tokens from the harvester windows.  \nsetup_browser #  | setup_browser(user_data_dir: str, width: int = 400, height: int = 600, browser_args: List[str] = None, extensions: List[str] = None, executable: str = None) -\u0026gt; Browser This is the only way to instanciate a Browser instance to harvest captchas through.\nAfter calling this method you will be able to access the browser instance via .browser\nThis method caches the browser as only one browser should be tied to\neach intercepter. This may change in the future\nArguments:\n user_data_dir str - This is where Chrome will store all it\u0026rsquo;s data.\nIt can be an empty directory. If you want to load a prevoius set of profiles,\npass the same path the next time you call the method. width int, optional - This sets the width of the browser window. Defaults to 400. height int, optional - This sets the height of the browser window. Defaults to 600. browser_args List[str], optional - This allows you to pass extra arguments to the\nbrowser process. Defaults to None. extensions List[str], optional - This allows you to load any extensions you\u0026rsquo;d like\nto be loaded when starting the Chrome instance. Defaults to None. executable str, optional - If for some reason Chrome is not installed in the usual\nspot or you want to use a custom binary, pass the path to binary here, or pass a\nprogram name that will be found in the PATH env variable . Defaults to None.  Returns:\n Browser - A browser instance that you can use to open windows to solve captchas from.  \nTokenQueue #  class TokenQueue() \nget #  | get(timeout: float = None, poll: float = 1) -\u0026gt; Optional[str] Contacts a harvester window to display a captcha to the user.\nArguments:\n timeout float, optional - Timeout the captcha request if the\nuser takes too long (seconds). Defaults to None. poll float, optional - If there are no avalibe captcha harvester\nwindows how often do you want check for new ones (seconds). Defaults to 1.  Returns:\n str - A captcha token to be submitted where ever you need it.  \nhCaptcha #  hCaptcha(url: str, sitekey: str) -\u0026gt; Captcha Creates a Captcha instance configured to solve hCaptchas\nArguments:\n url str - The full url on which the captcha is displayed. sitekey str - The sitekey of the captcha.  Returns:\n Captcha - A Captcha instance configured with the passed arguments  \nReCaptchaV2 #  ReCaptchaV2(url: str, sitekey: str) -\u0026gt; Captcha Creates a Captcha instance configured to solve ReCaptchaV2\nArguments:\n url str - The full url on which the captcha is displayed. sitekey str - The sitekey of the captcha.  Returns:\n Captcha - A Captcha instance configured with the passed arguments  \nReCaptchaV3 #  ReCaptchaV3(url: str, sitekey: str, action: str) -\u0026gt; Captcha Creates a Captcha instance configured to solve ReCaptchaV3\nArguments:\n url str - The full url on which the captcha is displayed. sitekey str - The sitekey of the captcha. action str - Action parameter passed when loading the captcha via JS.  Returns:\n Captcha - A Captcha instance configured with the passed arguments  \nBrowser #  class Browser() You can instantiate a brower instance like:\nintercepter.setup_browser(user_data_dir=\u0026#34;harvester-browser-data\u0026#34;) \nget_profiles #  | get_profiles() -\u0026gt; List[\u0026#39;Profile\u0026#39;] Get\u0026rsquo;s all the profiles that have been created by the harvester.\nNOTE: If you\u0026rsquo;d like to import profiles from any user-data-dir just\nprepend Account- before the profiles you\u0026rsquo;d like the harvester\nto recognize.\nReturns:\n List[Profile] - All the profiles created by the harvester.  \nget_profile #  | get_profile(name: str) -\u0026gt; \u0026#39;Profile\u0026#39; Returns a profile by name.\nArguments:\n name str - The name of the profile  Raises:\n ValueError - If the profile does not exist.  Returns:\n Profile - A Profile instance from which you can control\nthe browser.  \nprofile_exists #  | profile_exists(name: str) -\u0026gt; bool Checks to see if a profile directory exists.\nArguments:\n name str - The name of the profile to look up.  Returns:\n bool - If the directory with the passed name exists.  \nnew_profile #  | new_profile(name: str) -\u0026gt; \u0026#39;Profile\u0026#39; Creates a new directory with the profile\u0026rsquo;s name and\nreturns a new profile instance.\nArguments:\n name str - The name of the new profile.  Raises:\n ValueError - When the name of an existing profile has been passed.  Returns:\n Profile - Returns a new Profile instance with a name that hasn\u0026rsquo;t been used.  \nProfile #  class Profile() You can instantiate a profile in one of hte following ways:\nbrowser.new_profile(\u0026#39;Foo\u0026#39;) browser.get_profile(\u0026#39;Foo\u0026#39;) browser.get_profiles() # [Profile(Foo)] \nset_proxy #  | @verify_browser_not_running | set_proxy(proxy: Proxy) -\u0026gt; \u0026#39;Profile\u0026#39; Makes sure all connections from this profile from\nhence forth are all routed through the proxy server\nspecified in the Proxy object.\nArguments:\n proxy Proxy - An object describing the proxy connection.  Returns:\n Profile - Useful for chaining.  \npoll #  | poll() -\u0026gt; bool Poll to see if the browser process is still running\nReturns:\n bool - True if the browser process is still running,\notherwise False  \nkill #  | kill() Sends SIGKILL to the undelying browser process if\nit is still running.\n\ndelete #  | @verify_browser_not_running | delete() Removes the profile directory from the user_data_dir passed\nwhen calling setup_browser.\n\nharvest #  | @verify_browser_not_running | harvest() Opens a browser window pointing to domain passed to\nharvester.capture(...), sepcially configured to solve\ncaptchas.\n\nlaunch #  | @verify_browser_not_running | launch(url: str = None, app: bool = False) Opens a window for the user to do anything they want, usually before calling .harvest().\nNOTE: This method waits for the user to close the browser process.\nOn macOS this means the whole process must be quit, not just\nthe window.\nArguments:\n url str, optional - Open the browser to a specific url. Defaults to None. app bool, optional - Open the browser window with the --app=\u0026lt;url\u0026gt; flag. Defaults to False.  \nlogin_to_google #  | @verify_browser_not_running | login_to_google(login_url: str = DEFAULT_LOGIN_URL) Opens a window for the user to login to Google via a YouTube endpoint, usually before calling .harvest()\nNOTE: This method waits for the user to close the browser process.\nOn macOS this means the whole process must be quit, not just\nthe window.\nArguments:\n login_url str, optional - If you\u0026rsquo;d like to login via a different endpoint, pass it here. Defaults to\naccounts.google.com.  \nProxy #  @dataclass class Proxy() Create a Proxy object to be passed to Profile.set_proxy().\nproxy = Proxy(host=\u0026#39;127.0.0.1\u0026#39;, port=9436) authed_proxy = Proxy(host=\u0026#39;127.0.0.1\u0026#39;, port=9436, username=\u0026#39;bar\u0026#39;, password=\u0026#39;foo\u0026#39;) "});index.add({'id':7,'href':'/docs/6-pricing/','title':"6 Pricing",'section':"Docs",'content':"Pricing #  Overview #  It took a while to figure out how to farly price the harvester since it\u0026rsquo;s meant to be redistributed within bots of which many of allow binding/unbinding to different machines as long as there is only one instance of the bot running at a time. Because of this, I decided not to charge by the number of unique hardware addresses, but rather session ids.\nIf this is an issue, I am open to discusssing other options.\nScale #  I\u0026rsquo;ve based the price per unique session id off this function:\ndef calculate_invoice(unique_sessions): price_per_session = max( 122.75 / (unique_sessions + 22.75) if unique_sessions \u0026lt;= 100 else 50 / unique_sessions + .5, .5 ) return round(price_per_session * unique_sessions)    Unique Sessions Price (Month)                  Where to get a copy #  Right now the harvester is in active beta. To git a copy, you must fill out this\nGoogle Form.\nIt\u0026rsquo;s also a good idea to send me a message on Discord (@MacHacker#7322) just in\ncase I forgoet to check over the form responses.\nWhile you wait, if you plan to purchase a copy, you can fill out this\nGoogle Form\nto help me estimate how many users I\u0026rsquo;ll have to suppoort. You can find pricing\ndetails here.\nLicensing #  Apon reciving a copy, you\u0026rsquo;ll be provided with a zipfile (\u0026lt;your-discord-handle\u0026gt;-Beta.zip) which will differ based\non how you filled out the registration form. It\u0026rsquo;ll structured something like this:\n/package/\u0026lt;py-version\u0026gt;/\u0026lt;platform\u0026gt;/ harvester/ example.py hconfig.py secret.py Besides the actual harvester code within harvester/ the next most important file is\nhconfig.py. Your example hconfig.py will look something like this:\nfrom hashlib import md5 from secrets import key session = md5(key).hexdigest() The idea behind it, is that every\nWhen you recive the harvester zipfile, within in the file you\u0026rsquo;ll find a licence.key file.\nThis will be a string that should look something like this f4b038a5-110d-4f34-8e9b-afdb2090ba82.\nTo access the full power of the harvester you\u0026rsquo;ll have to first import the unlock function and\nproceed as so:\nimport harvester err = harvester.unlock(\u0026#39;f4b038a5-110d-4f34-8e9b-afdb2090ba82\u0026#39;) if err: raise RuntimeError(err) from harvester import Harvester, ReCaptchaV2 In addition to validating the licence key, calling unlock will also\nmake sure you have the most recent version of the harvester avaliable.\nYou should call this everytime before you start using the harvester.\nHowever, it will work without it for a couple of days until the copy\nit downloads and expires.\n"});})();